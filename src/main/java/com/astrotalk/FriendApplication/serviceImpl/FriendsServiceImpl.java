package com.astrotalk.FriendApplication.serviceImpl;

import com.astrotalk.FriendApplication.entity.ProductDescription;

 import com.itextpdf.*;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Queue;
import java.util.Vector;
import java.util.stream.Collectors;
import java.util.regex.Pattern;


import com.astrotalk.FriendApplication.userfriendsrequest.*;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;


import com.astrotalk.FriendApplication.service.FriendsService;




@Service
public class FriendsServiceImpl implements FriendsService {
	


private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,Font.BOLD);
private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,Font.BOLD);
private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.BOLD);
private static Font dataGreenFont = FontFactory.getFont("Garamond", 10, BaseColor.GREEN);
private static Font dataBlackFont = FontFactory.getFont("Garamond", 10, BaseColor.BLACK);
ArrayList<ProductDescription> prodDes;



@Override
public ResponseEntity<Map<String, Object>> getProductDetails(String url) {
	Map<String, Object> result = new HashMap<String, Object>();
	prodDes = new ArrayList<ProductDescription>();
	
	try {
		 Document doc = Jsoup.connect(url).timeout(6000).get();
		String str = doc.select("a-size-large a-spacing-none span.a-size-large product-title-word-break").text();
        String title = doc.title();
        Element AmazonTitle = doc.getElementById("productTitle");
        String imageAmazon = doc.getElementById("imgTagWrapperId").selectFirst("img").attr("src");
        String titleAM = AmazonTitle.text();
        String priceAmazon = doc.getElementById("priceblock_ourprice").text();
        String reviewAmazon = doc.getElementById("acrCustomerReviewText").text();
        
        String productDes = doc.getElementById("feature-bullets").text();
        ProductDescription pd = new ProductDescription();
        
       
        pd.setName(title);
        pd.setImageURL(imageAmazon);
        pd.setDescription(productDes);
        pd.setPrice(priceAmazon);
        pd.setTotalReviews(reviewAmazon);
        
        result.put("url", url);
        result.put("product", pd);
        
          
		
	} catch (IOException e) {
		
		e.printStackTrace();
		result.put("error", "URL error");
		return new ResponseEntity<Map<String, Object>>(result, HttpStatus.BAD_REQUEST);
	}
	return new ResponseEntity<Map<String, Object>>(result, HttpStatus.OK);
}
@Override
public ByteArrayInputStream  downloadPdf(String name, String imageURL, String description, String price,String totalReviews) {
	Map<String, Object> result = new HashMap<String, Object>();
	
	//final String FILE = "c:/Temp/"+name.replaceAll("\\s", "").substring(0, 6)+".pdf";
	 com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	  try {
		  
	
		  PdfWriter.getInstance(doc, out);
		  doc.open();
		  doc.addTitle("My first PDF");
		  doc.addSubject("Using iText");
		  Paragraph paragraph1 = new Paragraph("Seller-APP Coding ASSIGNMENT",catFont);  
		  doc.add(paragraph1);
		  Paragraph paragraph2 = new Paragraph(" "); 
		  doc.add(paragraph2);
		  
		  Paragraph para3 = new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(),smallBold);
		 doc.add(para3);
		 
		 for(int i=0;i<5;i++)
		 {
		 Paragraph para4= new Paragraph(" "); 
		  doc.add(para4);
		 }
		 
		
		  Paragraph p1 = new Paragraph("TiTLE:  ", smallBold);
		  p1.add((com.itextpdf.text.Element) new Chunk(name, redFont));
			 Paragraph para5= new Paragraph(" "); 
			  doc.add(para5);
			  doc.add(p1);
			
			  Paragraph p2 = new Paragraph("Description:  ", smallBold);
			  p2.add((com.itextpdf.text.Element) new Chunk(description, redFont));
			  doc.add(p2);
			 Paragraph para6= new Paragraph(" "); 
			  doc.add(para6);
			  Paragraph p3 = new Paragraph("Price:  ", smallBold);
			  p3.add((com.itextpdf.text.Element) new Chunk(price, redFont));
			  doc.add(p3);
			 Paragraph para7= new Paragraph(" "); 
			  doc.add(para7);
			
			  Paragraph p4 = new Paragraph("Total Reviews  :  ", smallBold);
			  p4.add((com.itextpdf.text.Element) new Chunk(totalReviews, redFont));
			  doc.add(p4);
			  Paragraph para8= new Paragraph(" "); 
			  doc.add(para8);
		  
			  Paragraph p5 = new Paragraph("Image URL  :  ", smallBold);
			  p5.add((com.itextpdf.text.Element) new Chunk(imageURL, redFont));
		 
		
			  doc.add(p5);
		   doc.close();
		  result.put("message", "Please Find pdf in c/Temp");
		  
	  }
catch(Exception e){
	 e.printStackTrace();
	 result.put("message", "Exception:please check whether file is open,if open please close and then hit the API");
}
	
	
	
	 
	return new ByteArrayInputStream(out.toByteArray());
}







}
